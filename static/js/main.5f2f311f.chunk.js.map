{"version":3,"sources":["assets/cover.jpeg","assets/img1.jpeg","assets/img2.jpeg","assets/wedding.mp3","App.js","reportWebVitals.js","index.js"],"names":["buttonConfig","label","id","botConfig","text","image","Image1","Image2","location","App","useState","CoverPic","chatData","setChatData","isInput","setInput","currentButtonFlow","setCurrentButtonFlow","userSelection","setUserSelection","chatRef","useRef","audioRef","useEffect","current","newNode","scrollTop","scrollHeight","src","weddingSong","play","className","ref","style","height","map","obj","i","data","userSays","dataText","dangerouslySetInnerHTML","__html","data-action","width","type","typing","renderChat","onClick","e","placeholder","disabled","slice","config","Button","variant","preventDefault","cloneChatData","buttons","filter","buttonFlow","userObj","botObj","push","buttonHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f2f311f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cover.35afeee1.jpeg\";","export default __webpack_public_path__ + \"static/media/img1.aa756d6b.jpeg\";","export default __webpack_public_path__ + \"static/media/img2.4dfef6c9.jpeg\";","export default __webpack_public_path__ + \"static/media/wedding.b5887c68.mp3\";","import React, {useState, useEffect, useRef} from 'react';\n\nimport ReactAudioPlayer from 'react-audio-player';\nimport { Button } from '@material-ui/core';\nimport TelegramIcon from '@material-ui/icons/Telegram';\nimport './App.css';\n\nimport CoverPic from './assets/cover.jpeg'\nimport Image1 from './assets/img1.jpeg'\nimport Image2 from './assets/img2.jpeg'\n\n\nimport weddingSong from './assets/wedding.mp3'\n\nconst buttonConfig = [\n\n    {\n      label: 'üìÖ When is the wedding?',\n      id: 'wedding date'\n    },\n    {\n      label: 'üï∫üèº When is the Sangeet? üíÉ',\n      id: 'sangeet date'\n    },\n    {\n      label: 'Want to see your pics üòç',\n      id: 'personal pics'\n    },\n    {\n      label: 'Where do I need to come?',\n      id: 'location'\n    },  \n]\n\nconst botConfig = {\n  'wedding date': {\n    text: [`It's on the <b>11th</b> of December.`, `Yeah we know, it's less than even a month and we are super nervous!`, `Please be there by 6pm üôè `]\n  },\n  'sangeet date': {\n    text: [`It's on the <b>10th</b> of December.`, `Yeah! He is a really good dancer üï∫. I am not so bad myself üíÉüèª`, `Please be there by 6pm üôè `]\n  },\n  'personal pics': {\n    image: [Image1, Image2],\n    text: [`Here you go`],\n  },\n  'location': {\n    text: [`It's at <b>Sri Sitaramji Bhawan, Raniganj</b>`, 'you can just follow google maps:'],\n    location: 'https://tars-file-upload.s3.amazonaws.com/ByNADi/e8e72425e745b4a32703175a09276c0a--staticmap.png'\n  }\n}\n\nfunction App() {\n  const [chatData, setChatData] = useState([\n    {\n        image: [CoverPic],\n        text: ['Hey! üòä', `We, <b>Abhineet</b> and <b>Raksha</b> are getting married. üíç`, 'And we want you to be a part of this celebration as we take the next step together.']\n    }\n    ]\n  )\n\n  const [isInput, setInput] = useState(true);\n  const [currentButtonFlow, setCurrentButtonFlow] = useState(buttonConfig)\n  const [userSelection, setUserSelection] = useState('')\n\n   const chatRef = useRef(false)\n   const audioRef = useRef(false)\n   \n  const renderChat = (data, i) => (\n    <>\n        {i % 2 === 1 ? (\n            <div className=\"user-response\">\n              <div className=\"message user-chat-bubble\">{data.userSays}</div>\n            </div>\n        ) : (\n            <div className=\"bot-response\">\n                <> \n                  <div >\n                      {data.text  && data.text.map((dataText) => <div className=\"message chat-bubble\">\n                            <span dangerouslySetInnerHTML={{__html: dataText}}></span>    \n                          </div>)\n                      }\n                      {data.image  && data.image.map((image) => <div className=\"message-image\">\n                          <img data-action=\"zoom\" src={image}/>    \n                        </div>)\n                      }\n                      {data.location && <div className=\"message chat-bubble\">\n                          <img src={data.location} style={{width: '100%'}}/>\n                        </div>\n                      }\n                      {<audio ref={audioRef}>\n                        <source type=\"audio/mpeg\"/>\n                      </audio>}\n                      {data.typing && 'typing..'}\n                  </div>\n                </>\n             </div>\n           \n        )}\n    </>\n  )\n\n  useEffect(() => { \n    if(chatRef.current) {\n        const newNode = chatRef\n       newNode.current.scrollTop= newNode.current.scrollHeight\n    }\n  })\n\n  useEffect(() => { \n    if(userSelection === 'wedding date') {\n      audioRef.current.src = weddingSong\n      audioRef.current.play()\n    }\n  }, [userSelection])\n\n  const inputHandler = (e) => {\n    setInput(!isInput)\n  }\n\n  const buttonHandler = (e, id, label) => {\n    e.preventDefault();\n    const cloneChatData = [...chatData];\n    const buttons = currentButtonFlow.filter((buttonFlow) => buttonFlow.id !== id)\n    const userObj = {\n      userSays: label\n    } \n    const botObj = {\n      ...botConfig[id]\n    }\n    cloneChatData.push(userObj)\n    cloneChatData.push(botObj)\n    setChatData(cloneChatData)\n    setCurrentButtonFlow(buttons)\n    setUserSelection(id)\n    setInput(!isInput)\n  }\n\n  return (\n    <div className=\"bot\">\n      <div className=\"bot-container\">\n        <div className=\"bot-section\">\n          <div className=\"bot-messages\" ref={chatRef} style={isInput ? { height: '75%'} : {height: '88%'}}> \n              {chatData.map((obj, i) => renderChat(obj, i))}\n          </div>\n          <div className=\"bot-footer\">\n            <div className=\"bot-input-container\" onClick={inputHandler}>\n              <input\n                type=\"text\" \n                placeholder=\"üëáüèªüëáüèª Choose from below... üëáüèªüëáüèª\"\n                className=\"input\"\n                disabled\n              />\n              <TelegramIcon className=\"input-send\"/>\n            </div>\n            {isInput && <div className=\"bot-button-container\">\n              {currentButtonFlow.slice(0,2).map((config, i) => (\n                <Button \n                  type=\"button\"\n                  className=\"button\" \n                  variant=\"contained\"\n                  onClick={(e) => buttonHandler(e, config.id, config.label)}\n                >\n                    {config.label}\n                </Button>\n              ))}\n            </div>}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}